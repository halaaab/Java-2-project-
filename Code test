

1. Abstract Class: Invoice

abstract class Invoice {
    private int invoiceID;
    private double totalAmount;

    public Invoice(int invoiceID, double totalAmount) {
        this.invoiceID = invoiceID;
        this.totalAmount = totalAmount;
    }

    public int getInvoiceID() {
        return invoiceID;
    }

    public double getTotalAmount() {
        return totalAmount;
    }

    public abstract void generateInvoice();

    public void displayInvoice() {
        System.out.println("Invoice ID: " + invoiceID);
        System.out.println("Total Amount: $" + totalAmount);
    }
}

2. Product Class (Composition in Order)

class Product {
    private String name;
    private double price;
    private int stock;

    public Product(String name, double price, int stock) {
        this.name = name;
        this.price = price;
        this.stock = stock;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public int getStock() {
        return stock;
    }

    public void updateStock(int quantity) {
        if (stock >= quantity) {
            stock -= quantity;
        } else {
            System.out.println("Insufficient stock for " + name);
        }
    }

    public void displayProductInfo() {
        System.out.println("Product: " + name + ", Price: $" + price + ", Stock: " + stock);
    }
}

3. Order Class (Aggregation with Product)

class Order {
    private Product product;
    private int quantity;
    private String status;

    public Order(Product product, int quantity) {
        this.product = product;
        this.quantity = quantity;
        this.status = "Pending";
        product.updateStock(quantity);
    }

    public double calculateTotal() {
        return product.getPrice() * quantity;
    }

    public void updateStatus(String status) {
        this.status = status;
    }

    public void displayOrderInfo() {
        System.out.println("Order Details:");
        System.out.println("Product: " + product.getName());
        System.out.println("Quantity: " + quantity);
        System.out.println("Total: $" + calculateTotal());
        System.out.println("Status: " + status);
    }
}

4. Employee Class (Composition in Bakery)

class Employee {
    private String name;
    private String role;
    private double salary;

    public Employee(String name, String role, double salary) {
        this.name = name;
        this.role = role;
        this.salary = salary;
    }

    public void displayEmployeeInfo() {
        System.out.println("Employee: " + name + ", Role: " + role + ", Salary: $" + salary);
    }

    public void updateSalary(double newSalary) {
        this.salary = newSalary;
    }
}

5. Bakery Class (Main Class)

import java.util.ArrayList;

class Bakery {
    private ArrayList<Product> products = new ArrayList<>();
    private ArrayList<Employee> employees = new ArrayList<>();
    private ArrayList<Order> orders = new ArrayList<>();

    public void addProduct(Product product) {
        products.add(product);
    }

    public void addEmployee(Employee employee) {
        employees.add(employee);
    }

    public void placeOrder(Order order) {
        orders.add(order);
    }

    public void viewProducts() {
        System.out.println("Bakery Products:");
        for (Product product : products) {
            product.displayProductInfo();
        }
    }

    public void viewOrders() {
        System.out.println("Bakery Orders:");
        for (Order order : orders) {
            order.displayOrderInfo();
        }
    }

    public void viewEmployees() {
        System.out.println("Bakery Employees:");
        for (Employee employee : employees) {
            employee.displayEmployeeInfo();
        }
    }
}

6. Main Class (Testing the System)

public class BakerySystem {
    public static void main(String[] args) {
        Bakery bakery = new Bakery();

        // Adding Products
        Product cake = new Product("Cake", 15.0, 10);
        Product bread = new Product("Bread", 5.0, 20);
        bakery.addProduct(cake);
        bakery.addProduct(bread);

        // Adding Employees
        Employee baker = new Employee("Alice", "Baker", 3000);
        Employee cashier = new Employee("Bob", "Cashier", 2500);
        bakery.addEmployee(baker);
        bakery.addEmployee(cashier);

        // Placing Orders
        Order order1 = new Order(cake, 2);
        bakery.placeOrder(order1);

        // Display Information
        bakery.viewProducts();
        bakery.viewEmployees();
        bakery.viewOrders();
    }
}

Key Features in the Code:

âœ… Object-Oriented Programming (OOP) concepts are used.
âœ… Composition (Product is part of Order, Employee is part of Bakery).
âœ… Aggregation (Bakery holds a list of Products, Employees, and Orders).
âœ… Polymorphism (Abstract Invoice class with generateInvoice() method).
âœ… Encapsulation (Private attributes with Getters/Setters).
âœ… Beginner-friendly (Simple and structured code).

This implementation meets your project requirements while keeping it easy to understand for Java 2 beginners. Let me know if you need any modifications! ðŸš€
